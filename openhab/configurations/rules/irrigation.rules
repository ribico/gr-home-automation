import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

import org.joda.time.*


rule "Irrigation startup"
when
    System started
then
//    postUpdate(Irrigation_StartTime, "03:00")

//    sendCommand(Irrigation_Terrace, OFF)
//    sendCommand(Irrigation_Vege, OFF)
//    sendCommand(Irrigation_Lawn1, OFF)
//    sendCommand(Irrigation_Lawn2, OFF)
//    sendCommand(Irrigation_Ent, OFF)
//    sendCommand(Irrigation_Balcony, OFF)

    sendCommand(Irrigation_MasterTimeMins, 0)
    sendCommand(Irrigation_ScaleFactor, 100)

    sendCommand(Irrigation_TerraceMins, 0)
    sendCommand(Irrigation_VegeMins, 10)
    sendCommand(Irrigation_Lawn1Mins, 10)
    sendCommand(Irrigation_Lawn2Mins, 10)
    sendCommand(Irrigation_EntMins, 15)
    sendCommand(Irrigation_BalconyMins, 10)

    logInfo("Irrigation ", "End of initialization")
end

rule "Set time now"
when
    Item Irrigation_SetNow received update
then

  var DateTime localNow = now.plusHours(2)
  var int minutes = localNow.getHourOfDay() * 60 + localNow.getMinuteOfHour()
  Irrigation_MasterTimeMins.sendCommand(minutes);
end

rule "Irrigation start time set"
when
    Time cron "0 5 0 * * ?" or
    Item Irrigation_MasterTimeMins received update
then
    var int minutes = (Irrigation_MasterTimeMins.state as DecimalType).intValue()

     // work out when the alarm is to fire - start from midnight
     var DateTime alarmTime = parse(now.getYear() + "-" + now.getMonthOfYear() + "-" + now.getDayOfMonth() + "T00:00")

     // add the number of minutes selected
     alarmTime = alarmTime.plusMinutes(minutes)

     // update the alarm display time
     Irrigation_StartTime.sendCommand(String::format("%02d:%02d", alarmTime.getHourOfDay(), alarmTime.getMinuteOfHour()))

    logInfo("Irrigation ", "set start time")
end

rule "Irrigation"
when
  Time cron "0 * * * * ?"
then
  if (Irrigation_Master.state == ON)
  {
    // get the scale factor - used to reduce the run times across the board
    var Number scaleFactor = Irrigation_ScaleFactor.state as DecimalType
    var Number minFromMidnight = Irrigation_MasterTimeMins.state as DecimalType

    var DateTime localNow = now.plusHours(2)
    logInfo("NOW", localNow.toString)

    // convert our start time to a joda.time.DateTime for today
    var DateTime startTime = parse(localNow.getYear() + "-" + localNow.getMonthOfYear() + "-" + localNow.getDayOfMonth() + "T" + Irrigation_StartTime.state + ":00")

    // get the raw run times for each zone (in mins)
    var Number terraceMins = Irrigation_TerraceMins.state as DecimalType
    var Number vegeMins = Irrigation_VegeMins.state as DecimalType
    var Number lawn1Mins = Irrigation_Lawn1Mins.state as DecimalType
    var Number lawn2Mins = Irrigation_Lawn2Mins.state as DecimalType
    var Number entMins = Irrigation_EntMins.state as DecimalType
    var Number balconyMins = Irrigation_BalconyMins.state as DecimalType

    // convert to the actual run times (by applying the scale factor)
    var int terraceTime = ((terraceMins * scaleFactor) / 100).intValue
    var int vegeTime = ((vegeMins * scaleFactor) / 100).intValue
    var int lawn1Time = ((lawn1Mins * scaleFactor) / 100).intValue
    var int lawn2Time = ((lawn2Mins * scaleFactor) / 100).intValue
    var int entTime = ((entMins * scaleFactor) / 100).intValue
    var int balconyTime = ((balconyMins * scaleFactor) / 100).intValue

    var DateTime endTerraceTime = startTime.plusMinutes(terraceTime)
    var DateTime endVegeTime = endTerraceTime.plusMinutes(vegeTime)
    var DateTime endLawn1Time = endVegeTime.plusMinutes(lawn1Time)
    var DateTime endLawn2Time = endLawn1Time.plusMinutes(lawn2Time)
    var DateTime endEntTime = endLawn2Time.plusMinutes(entTime)
    var DateTime endBalconyTime = endEntTime.plusMinutes(balconyTime)

/*
    logInfo("START", startTime.toString)
    logInfo("STOP TERRACE",  endTerraceTime.toString)
    logInfo("STOP VEGE",  endVegeTime.toString)
    logInfo("STOP LAWN1",  endLawn1Time.toString)
    logInfo("STOP LAWN2",  endLawn2Time.toString)
    logInfo("STOP ENT",  endEntTime.toString)
    logInfo("STOP BALCONY",  endBalconyTime.toString)
*/
    if( localNow.isAfter(startTime) && localNow.isBefore(endTerraceTime) )
    {
      logInfo("IRRIGAZIONE:", "TERRAZZO")
      sendCommand(Irrigation_Terrace, ON)
      sendCommand(Irrigation_Vege, OFF)
      sendCommand(Irrigation_Lawn1, OFF)
      sendCommand(Irrigation_Lawn2, OFF)
      sendCommand(Irrigation_Ent, OFF)
      sendCommand(Irrigation_Balcony, OFF)
    }
    else if( localNow.isAfter(endTerraceTime) && localNow.isBefore(endVegeTime) )
    {
      logInfo("IRRIGAZIONE", "ORTO")
      sendCommand(Irrigation_Terrace, OFF)
      sendCommand(Irrigation_Vege, ON)
      sendCommand(Irrigation_Lawn1, OFF)
      sendCommand(Irrigation_Lawn2, OFF)
      sendCommand(Irrigation_Ent, OFF)
      sendCommand(Irrigation_Balcony, OFF)
    }
    else if( localNow.isAfter(endVegeTime) && localNow.isBefore(endLawn1Time) )
    {
      logInfo("IRRIGAZIONE", "PRATO1")
      sendCommand(Irrigation_Terrace, OFF)
      sendCommand(Irrigation_Vege, OFF)
      sendCommand(Irrigation_Lawn1, ON)
      sendCommand(Irrigation_Lawn2, OFF)
      sendCommand(Irrigation_Ent, OFF)
      sendCommand(Irrigation_Balcony, OFF)
    }
    else if( localNow.isAfter(endLawn1Time) && localNow.isBefore(endLawn2Time) )
    {
      logInfo("IRRIGAZIONE", "PRATO2")
      sendCommand(Irrigation_Terrace, OFF)
      sendCommand(Irrigation_Vege, OFF)
      sendCommand(Irrigation_Lawn1, OFF)
      sendCommand(Irrigation_Lawn2, ON)
      sendCommand(Irrigation_Ent, OFF)
      sendCommand(Irrigation_Balcony, OFF)
    }
    else if( localNow.isAfter(endLawn2Time) && localNow.isBefore(endEntTime) )
    {
      logInfo("IRRIGAZIONE", "ENTRATA")
      sendCommand(Irrigation_Terrace, OFF)
      sendCommand(Irrigation_Vege, OFF)
      sendCommand(Irrigation_Lawn1, OFF)
      sendCommand(Irrigation_Lawn2, OFF)
      sendCommand(Irrigation_Ent, ON)
      sendCommand(Irrigation_Balcony, OFF)
    }
    else if( localNow.isAfter(endEntTime) && localNow.isBefore(endBalconyTime) )
    {
      logInfo("IRRIGAZIONE", "BALCONI")
      sendCommand(Irrigation_Terrace, OFF)
      sendCommand(Irrigation_Vege, OFF)
      sendCommand(Irrigation_Lawn1, OFF)
      sendCommand(Irrigation_Lawn2, OFF)
      sendCommand(Irrigation_Ent, OFF)
      sendCommand(Irrigation_Balcony, ON)
    }
    else
    {
      logInfo("IRRIGAZIONE", "ALL ZONE CLOSED")
      sendCommand(Irrigation_Terrace, OFF)
      sendCommand(Irrigation_Vege, OFF)
      sendCommand(Irrigation_Lawn1, OFF)
      sendCommand(Irrigation_Lawn2, OFF)
      sendCommand(Irrigation_Ent, OFF)
      sendCommand(Irrigation_Balcony, OFF)
    }
  }
end
