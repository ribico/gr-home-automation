import org.openhab.core.library.types.*


/*****************************************************
Calculate Dew Points
******************************************************/

rule "DP_Living"
when
    Item Temperature_2F_Living changed or
    Item UR_2F_Living changed
then
	try {
		var current_temp = Temperature_2F_Living.state as DecimalType
		var current_ur = UR_2F_Living.state as DecimalType

		// calculate dew point
		Temperature_2F_Living_DP.sendCommand(current_temp-(100-current_ur)/5)

	}
	catch (Exception e) // temperature set point undefined
	{
			logInfo("Exception in DP_Living", current_temp.toString)
			logInfo("Exception in DP_Living", current_ur.toString)
	}

end



rule "DP_Kitchen"
when
    Item Temperature_2F_Kitchen changed or
    Item UR_2F_Kitchen changed
then
	try {
		var Number current_temp = Temperature_2F_Kitchen.state as DecimalType
		var Number current_ur = UR_2F_Kitchen.state as DecimalType

		// calculate dew point
		Temperature_2F_Kitchen_DP.sendCommand(current_temp-(100-current_ur)/5)

	}
	catch (Exception e) // temperature set point undefined
	{
		logInfo("Exception in DP_Kitchen", current_temp.toString)
		logInfo("Exception in DP_Kitchen", current_ur.toString)
	}

end

rule "DP_Dining"
when
    Item Temperature_2F_Dining changed or
    Item UR_2F_Dining changed
then
	try {
		var Number current_temp = Temperature_2F_Kitchen.state as DecimalType
		var Number current_ur = UR_2F_Kitchen.state as DecimalType

		// calculate dew point
		Temperature_2F_Dining_DP.sendCommand(current_temp-(100-current_ur)/5)

	}
	catch (Exception e)
	{
		logInfo("Exception in DP_Dining", current_temp.toString)
		logInfo("Exception in DP_Dining", current_ur.toString)
	}

end

rule "DP_Bedroom1"
when
    Item Temperature_2F_Bedroom1 changed or
    Item UR_2F_Bedroom1 changed
then
	try {

		var Number current_temp = Temperature_2F_Bedroom1.state as DecimalType
		var Number current_ur = UR_2F_Bedroom1.state as DecimalType

		// calculate dew point
		Temperature_2F_Bedroom1_DP.sendCommand(current_temp-(100-current_ur)/5)

	}
	catch (Exception e) // temperature set point undefined
	{
		logInfo("Exception in DP_Bedroom1", current_temp.toString)
		logInfo("Exception in DP_Bedroom1", current_ur.toString)
	}

end


rule "DP_Bedroom2"
when
    Item Temperature_2F_Bedroom2 changed or
    Item UR_2F_Bedroom2 changed
then
	try {
		var Number current_temp = Temperature_2F_Bedroom2.state as DecimalType
		var Number current_ur = UR_2F_Bedroom2.state as DecimalType

		// calculate dew point
		Temperature_2F_Bedroom2_DP.sendCommand(current_temp-(100-current_ur)/5)

	}
	catch (Exception e) // temperature set point undefined
	{
		logInfo("Exception in DP_Bedroom2", current_temp.toString)
		logInfo("Exception in DP_Bedroom2", current_ur.toString)
	}

end


rule "DP_Bedroom3"
when
    Item Temperature_2F_Bedroom3 changed or
    Item UR_2F_Bedroom3 changed
then
	try {
		var Number current_temp = Temperature_2F_Bedroom3.state as DecimalType
		var Number current_ur = UR_2F_Bedroom3.state as DecimalType

		// calculate dew point
		Temperature_2F_Bedroom3_DP.sendCommand(current_temp-(100-current_ur)/5)

	}
	catch (Exception e) // temperature set point undefined
	{
		logInfo("Exception in DP_Bedroom3", current_temp.toString)
		logInfo("Exception in DP_Bedroom3", current_ur.toString)
	}

end

rule "DP_Bath1"
when
    Item Temperature_2F_Bath1 changed or
    item UR_2F_Bath1 changed
then
	try {
		var Number current_temp = Temperature_2F_Bath1.state as DecimalType
		var Number current_ur = UR_2F_Bath1.state as DecimalType

		// calculate dew point
		Temperature_2F_Bath1_DP.sendCommand(current_temp-(100-current_ur)/5)

	}
	catch (Exception e) // temperature set point undefined
	{
		logInfo("Exception in DP_Bath1", current_temp.toString)
		logInfo("Exception in DP_Bath1", current_ur.toString)
	}

end


rule "DP_Bath2"
when
    Item Temperature_2F_Bath2 changed or
    Item UR_2F_Bath2 changed
then
	try {
		var Number current_temp = Temperature_2F_Bath2.state as DecimalType
		var Number current_ur = UR_2F_Bath2.state as DecimalType

		// calculate dew point
		Temperature_2F_Bath2_DP.sendCommand(current_temp-(100-current_ur)/5)

	}
	catch (Exception e) // temperature set point undefined
	{
		logInfo("Exception in DP_Bath1", current_temp.toString)
		logInfo("Exception in DP_Bath1", current_ur.toString)
	}

end
